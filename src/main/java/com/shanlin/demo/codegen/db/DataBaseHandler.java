//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : DataBaseHandler.java
//  @ Date : 2015/5/9
//  @ Author : shanlin
//
//
package com.shanlin.demo.codegen.db;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import com.mysql.jdbc.StringUtils;
import com.shanlin.demo.codegen.model.Column;
import com.shanlin.demo.codegen.model.Table;
import com.shanlin.demo.codegen.properties.PropertisBudle;

public class DataBaseHandler {
	private static Connection connection;
	
	static{
		try {
		    // 建立数据库连接
			Class.forName(PropertisBudle.DB_DRIVER_CLASS);
			connection = DriverManager.getConnection(PropertisBudle.DB_URL, PropertisBudle.DB_USERNAME, PropertisBudle.DB_PASSWORD);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	public List<Table> getAllModel(){
		try {
		    // 获取表
			Map<String, Table>  tableMap = getAllTables();
			if (tableMap.isEmpty()) {
				return new ArrayList<Table>(tableMap.values());
			}
			// 设置列信息
			for (String tableName : tableMap.keySet()) {
			    this.getAllColumnsForTable(tableMap.get(tableName));
            }
			
			return new ArrayList<Table>(tableMap.values());
		} catch (SQLException e) {
			e.printStackTrace();
		} finally{
			colse();
		}
		
		return new ArrayList<Table>();
	}
	
	private Map<String, Table> getAllTables() throws SQLException{
		if (connection == null) {
			return new HashMap<String, Table>();
		}
		
		DatabaseMetaData metaData = connection.getMetaData();
		// 获取scheame下的所有表
		ResultSet tableSet = metaData.getTables(null, PropertisBudle.DB_SCHEAME, null, new String[]{"TABLE"});
		
		Map<String, Table> tables = new HashMap<String, Table>();
		Table table = null;
		while (tableSet.next()) {
			table = new Table();
			String tableName = tableSet.getString("TABLE_NAME");
			
			if (this.isNeedGenTable(tableName)) {
			    table.setTableName(tableName.replaceFirst(PropertisBudle.DB_TABLE_PREFIX, ""));
			    tables.put(tableName, table);
            }
		}
		
		return tables;
	}
	

	private boolean isNeedGenTable(String tableName){
	    if (StringUtils.isEmptyOrWhitespaceOnly(PropertisBudle.DB_TABLE_GEN)) {
            return true;
        }
	    
	    String[] patterns = PropertisBudle.DB_TABLE_GEN.split(",");
	    
	    for (String tempPattern : patterns) {
	        Pattern pattern = Pattern.compile(tempPattern);
	        boolean isMatche = pattern.matcher(tableName).matches();
	        if (isMatche) {
                return true;
            }
        }
	    
	    return false;
	}
	
	private Table getAllColumnsForTable(Table table) throws SQLException{
		DatabaseMetaData metaData = connection.getMetaData();
		ResultSet rs = metaData.getColumns(null, PropertisBudle.DB_SCHEAME, table.getTableName(), null);
		
		Column column = null;
		while (rs.next()) {
		    // 获取当前行中的table
			column = new Column();
			column.setColumnName(rs.getString("COLUMN_NAME"));
			column.setDataType(rs.getInt("DATA_TYPE"));
			column.setDataTypeName(rs.getString("TYPE_NAME"));
			column.setDesc(rs.getString("REMARKS"));
			column.setAuto(rs.getString("IS_AUTOINCREMENT").toLowerCase().equals("yes"));
			
			table.getColumns().add(column);
		}
		
		ResultSet pkRs = metaData.getPrimaryKeys(null, PropertisBudle.DB_SCHEAME, table.getTableName());
        while (pkRs.next()) {
            String columnName = pkRs.getString("COLUMN_NAME");//列名
            
            for (Column columnInfo : table.getColumns()) {
                if (columnName.equals(columnInfo.getColumnName())) {
                    columnInfo.setPk(true);
                }
            }
        }
		
		return table;
	}
	
	public static void colse() {
		try {
			if (connection != null) {
				connection.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
